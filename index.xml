<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Choon Kiat (CK) </title>
    <link>/</link>
    <language>en-us</language>
    <author>Choon Kiat (CK)</author>
    <rights>(C) 2020</rights>
    <updated>2020-04-19 05:52:16 &#43;0800 &#43;08</updated>

    
      <item>
        <title>Compiling Pytorch for the Raspberry Pi</title>
        <link>/posts/00003-pi_torch/</link>
        <pubDate>Tue, 21 Apr 2020 17:45:41 &#43;08</pubDate>
        <author>Choon Kiat (CK)</author>
        <guid>/posts/00003-pi_torch/</guid>
        <description>&lt;h1 id=&#34;tldr&#34;&gt;TLDR:&lt;/h1&gt;
&lt;p&gt;We used the raspbian image available &lt;a href=&#34;https://hub.docker.com/r/choonkiatlee/raspbian&#34;&gt;here&lt;/a&gt; to compile a version of Pytorch for the Raspberry Pi. This is an armv7l image that has been compiled with NEON optimisations and NNPACK / QNNPACK, allowing it to run decently fast on the resource constrained RPi.&lt;/p&gt;
&lt;p&gt;The compiled pytorch / torchvision wheels can be found &lt;a href=&#34;https://github.com/choonkiatlee/pi-torch&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More information about the QEMU user-mode emulation used in the docker image can be found [here] ( /posts/00002-raspbian-qemu/)&lt;/p&gt;
&lt;h2 id=&#34;build-process&#34;&gt;Build Process:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install required dependencies on the host:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install qemu qemu-user-static binfmt-support
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the docker container:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run -it --name pytorch_builder choonkiatlee/raspbian:build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install dependencies in the container and collect pytorch sources&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;####################### In Docker Container #######################&lt;/span&gt;
root@b0571199906e:/# apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y python3-cffi python3-numpy libatlas-base-dev

root@b0571199906e:/# echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[global]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;root@b0571199906e:/# extra-index-url=https://www.piwheels.org/simple&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/pip.conf

root@b0571199906e:/# pip3 install cython wheel pyyaml pillow

root@b0571199906e:/# git clone --recursive https://github.com/pytorch/pytorch

root@b0571199906e:/# cd pytorch

root@b0571199906e:/# git checkout v1.4.0

root@b0571199906e:/# git submodule sync --recursive
root@b0571199906e:/# git submodule update --init --recursive

&lt;span style=&#34;color:#75715e&#34;&gt;# Fix from: https://github.com/pytorch/pytorch/issues/22564&lt;/span&gt;
root@b0571199906e:/# git submodule update --remote third_party/protobuf

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure build options and build pytorch from source:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@b0571199906e:/# export USE_CUDA&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0
root@b0571199906e:/# export USE_CUDNN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0
root@b0571199906e:/# export USE_MKLDNN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0

root@b0571199906e:/# export USE_METAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0
root@b0571199906e:/# export USE_NCCL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;OFF

root@b0571199906e:/# export USE_NNPACK&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1
root@b0571199906e:/# export USE_QNNPACK&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1
root@b0571199906e:/# export USE_DISTRIBUTED&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0
root@b0571199906e:/# export BUILD_TEST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0

&lt;span style=&#34;color:#75715e&#34;&gt;# Use the number of CPUs that you have available on the host machine&lt;/span&gt;
root@b0571199906e:/# export MAX_JOBS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; 

&lt;span style=&#34;color:#75715e&#34;&gt;# Enable NEON optimisations&lt;/span&gt;
root@b0571199906e:/# export CFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-mfpu=neon -D__NEON__&amp;#34;&lt;/span&gt; 

root@b0571199906e:/# python3 setup.py bdist_wheel

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy out the built wheel&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;####################### In Host #######################&lt;/span&gt;
$ docker cp pytorch_builder:/pytorch/dist/. .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional: Build torchvision&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run -it --name pytorch_builder choonkiatlee/raspbian:latest

&lt;span style=&#34;color:#75715e&#34;&gt;####################### In Docker Container #######################&lt;/span&gt;
root@b0571199906e:/# git clone https://github.com/pytorch/vision.git
root@b0571199906e:/# cd vision

&lt;span style=&#34;color:#75715e&#34;&gt;# Remember to install the built pytorch wheel from before&lt;/span&gt;
root@b0571199906e:/# pip3 install /pytorch/dist/.
root@b0571199906e:/# python3 setup.py bdist_wheel

&lt;span style=&#34;color:#75715e&#34;&gt;####################### In Host #######################&lt;/span&gt;
$ docker cp pytorch_builder:/vision/dist/. .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonus! Easier method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install qemu-user-static qemu binfmt-support

&lt;span style=&#34;color:#75715e&#34;&gt;# Clone the repo to get the above commands as a single script&lt;/span&gt;
git clone https://github.com/choonkiatlee/pi-torch.git

&lt;span style=&#34;color:#75715e&#34;&gt;# Override the entrypoint&lt;/span&gt;
docker create --name pytorch_builder choonkiatlee/raspbian:build qemu-arm-static /bin/bash install_pytorch.sh

&lt;span style=&#34;color:#75715e&#34;&gt;# Copy the build script onto the docker container and run the container&lt;/span&gt;
docker cp pi-torch/install_pytorch.sh pytorch_builder:/install_pytorch.sh
docker start pytorch_builder

&lt;span style=&#34;color:#75715e&#34;&gt;# Attach to the container to see the output&lt;/span&gt;
docker attach pytorch_builder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      </item>
    
      <item>
        <title>Raspbian on your laptop: QEMU</title>
        <link>/posts/00002-raspbian-qemu/</link>
        <pubDate>Mon, 20 Apr 2020 23:45:41 &#43;08</pubDate>
        <author>Choon Kiat (CK)</author>
        <guid>/posts/00002-raspbian-qemu/</guid>
        <description>&lt;h2 id=&#34;tldr&#34;&gt;TLDR&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/choonkiatlee/raspbian&#34;&gt;&lt;code&gt;raspbian&lt;/code&gt;&lt;/a&gt; is a docker image that allows you to run a fast raspbian image built for ARM directly on your x86 desktop. Test it out here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -it --rm choonkiatlee/raspbian:faithful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Recently, I&amp;rsquo;ve been very interested in running machine learning algorithms on edge devices such as the Raspberry Pi.&lt;/p&gt;
&lt;p&gt;Pytorch has released a new &lt;a href=&#34;https://pytorch.org/docs/stable/jit.html&#34;&gt;JIT&lt;/a&gt; compilation feature. As explained in the linked documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TorchScript is a way to create serializable and optimizable models from PyTorch code. Any TorchScript program can be saved from a Python process and loaded in a process where there is no Python dependency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, I could not find any pre-compiled pytorch wheels for my Raspberry Pi. Thus, I decided to compile my own wheels. However, the compilation process takes really long (&amp;gt;36 hours) and so I decided to try leverage my own computer (or an Azure VM) to do the job for me instead.&lt;/p&gt;
&lt;h2 id=&#34;first-steps-qemu&#34;&gt;First steps: QEMU&lt;/h2&gt;
&lt;p&gt;I was first inspired by @nmilosev&amp;rsquo;s article &lt;a href=&#34;https://nmilosev.svbtle.com/compling-arm-stuff-without-an-arm-board-build-pytorch-for-the-raspberry-pi%5D&#34;&gt;https://nmilosev.svbtle.com/compling-arm-stuff-without-an-arm-board-build-pytorch-for-the-raspberry-pi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The gist of the solution is that we can use the QEMU emulator to run programs compiled for ARM on our own x86 host machine. Using the qemu-user programs, we can use QEMU in the &lt;code&gt;User Mode Emulation&lt;/code&gt; operation mode. In this mode, QEMU can launch Linux processes compiled for one CPU (Raspberry Pi) on another CPU (x86_64 host), and will translate syscalls on the fly. This way, we are still interfacing with the native kernel in the same way as any native piece of software.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;qemu_emulation.png&#34; alt=&#34;Comparison of emulation modes&#34;&gt;&lt;/p&gt;
&lt;p&gt;This brings much benefits as we no longer have to emulate all the hardware, which is slow. We also do not need to emulate the kernel, which is where most of the emulation computation takes place.&lt;/p&gt;
&lt;p&gt;Once we&amp;rsquo;ve installed the QEMU user emulation software, we can run the Raspbian bash whilst mounting the Raspbian rootFS, which gives us a bash shell that for most intents and purposes mimics one running on the RPI!&lt;/p&gt;
&lt;h2 id=&#34;now-for-some-code&#34;&gt;Now for some code&amp;hellip;&lt;/h2&gt;
&lt;p&gt;The following instructions have been adapted from the very good tutorial &lt;a href=&#34;https://wiki.debian.org/RaspberryPi/qemu-user-static&#34;&gt;here!&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the QEMU emulation software&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# First, install the QEMU software&lt;/span&gt;
sudo apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install  -y --no-install-recommends qemu binfmt-support qemu-user-static
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount or create a raspbian filesystem. You can either create a minimal rootfs from scratch using debootstrap or mount a pre-created raspbian image (eg: from the Raspberry Pi Foundation release).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 1. Create a minimal rootfs from scratch&lt;/span&gt;
mkdir ~/rpi_mnt

wget --no-check-certificate https://archive.raspbian.org/raspbian.public.key -O - | sudo apt-key add -q

sudo qemu-debootstrap --variant&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;minbase&amp;#39;&lt;/span&gt; 
                --keyring&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/etc/apt/trusted.gpg &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
                --include&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;python3,git,python3-pip &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
                --arch armhf buster ~/rpi_mnt http://archive.raspbian.org/raspbian 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 2. Mount an existing Raspbian Image&lt;/span&gt;
           
&lt;span style=&#34;color:#75715e&#34;&gt;# (Optional) Download the official Raspbian Image&lt;/span&gt;
wget https://downloads.raspberrypi.org/raspbian_lite_latest
unzip raspbian_lite_latest

&lt;span style=&#34;color:#75715e&#34;&gt;# Generate variables&lt;/span&gt;
RPI_IMG_FILENAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;unzip -Z -1 raspbian_lite_latest&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
LOOP_DEVICE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;sudo losetup -f&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# Find the name of the created loop device&lt;/span&gt;                      

&lt;span style=&#34;color:#75715e&#34;&gt;# Create a loopback device and mount it&lt;/span&gt;
mkdir ~/rpi_mnt
sudo losetup -f -P $RPI_IMG_FILENAME   
sudo mount &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;LOOP_DEVICE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;p2 -o rw rpi_mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prepare for chroot&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Copy the quemu-arm-static binary into the image to be produced&lt;/span&gt;
sudo cp /usr/bin/qemu-arm-static rpi_mnt/usr/bin

&lt;span style=&#34;color:#75715e&#34;&gt;# Backup /etc/ld.so.preload and remove it before chrooting in.&lt;/span&gt;
sudo mv ~/rpi_mnt/etc/ld.so.preload ~/rpi_mnt/etc/ld.so.preload.backup
sudo touch ~/rpi_mnt/etc/ld.so.preload

&lt;span style=&#34;color:#75715e&#34;&gt;# (Optional) -- Before chrooting in, mount device specific files from the host. Be careful though! Improper editing of these files can cause your host system to crash&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# mount --bind /dev ~/rpi_mnt/dev/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# mount --bind /sys ~/rpi_mnt/sys/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# mount --bind /proc ~/rpi_mnt/proc/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# mount --bind /dev/pts ~/rpi_mnt/dev/pts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actually chroot in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Preferably, use systemd-nspawn instead if your host system uses systemd. This is best practice and does a better job of islating the chroot environment from your host system&lt;/span&gt;

sudo apt-get install systemd-container
systemd-nspawn -D ~/rpi_mnt bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Alternatively, chroot in&lt;/span&gt;
chroot . ~/rpi_mntbin/bash    

&lt;span style=&#34;color:#75715e&#34;&gt;# Success!&lt;/span&gt; 
uname -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is extremely useful, and allows you to easily edit and test your distribution before you burn it to an SD card for the RPi!&lt;/p&gt;
&lt;p&gt;However, this involves a lot of steps, and is hard to automate. In the next post, we will discuss how to create a docker container using the principles listed here to create our Raspbian docker image!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.debian.org/RaspberryPi/qemu-user-static&#34;&gt;https://wiki.debian.org/RaspberryPi/qemu-user-static&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nmilosev.svbtle.com/compling-arm-stuff-without-an-arm-board-build-pytorch-for-the-raspberry-pi&#34;&gt;https://nmilosev.svbtle.com/compling-arm-stuff-without-an-arm-board-build-pytorch-for-the-raspberry-pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/pengdonglin137/p/5020143.html#_lab2_0_0&#34;&gt;https://www.cnblogs.com/pengdonglin137/p/5020143.html#_lab2_0_0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>TIL: Setting up Hugo to work with Github Pages</title>
        <link>/posts/00001-setting_up_hugo/</link>
        <pubDate>Mon, 20 Apr 2020 17:04:49 &#43;08</pubDate>
        <author>Choon Kiat (CK)</author>
        <guid>/posts/00001-setting_up_hugo/</guid>
        <description>&lt;p&gt;Unlike Jekyll, Hugo does not work with Github Pages out of the box.&lt;/p&gt;
&lt;p&gt;The biggest worry for me was that I did not want the commit history of my site to be polluted with large changes to the generated files. Ideally, we want to separate the commit histories of the source files and the generated files.&lt;/p&gt;
&lt;p&gt;One simple way of doing this is simply by creating 2 github repositories. One for the generated site and one for the source files used to generate the site. By adding the generated site repository as a submodule of the source file repository, both source and generated repositories will be committed together. This is the approach given in the &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/#step-by-step-instructions&#34;&gt;Hugo Docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, just for fun, I wondered if one could still achieve the original requirement of source and generated file separation using only one github repo, which would make things much cleaner. This is complicated by the fact that for a Github User Page, the page can only be served out of the master branch.&lt;/p&gt;
&lt;p&gt;We outline a simple solution below using different branches.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new repository and a new branch called source to store our source files. Note that we also need to ignore the &lt;code&gt;public/&lt;/code&gt; folder, which is where all our generated files from Hugo will be stored.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create the directory structure starting from an empty git repo&lt;/span&gt;
git clone https://github.com/choonkiatlee/choonkiatlee.github.io.git

&lt;span style=&#34;color:#75715e&#34;&gt;# Create a new branch called source that will store our source files&lt;/span&gt;
cd choonkiatlee.github.io
git checkout --orphan source

&lt;span style=&#34;color:#75715e&#34;&gt;# Setup the .gitignore file&lt;/span&gt;
echo public/ &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Initialise our new Hugo site! (Based off the official &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Hugo documentation&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initialise our hugo site&lt;/span&gt;
hugo new site . --force

&lt;span style=&#34;color:#75715e&#34;&gt;# (Optional -- Add themes)&lt;/span&gt;
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; config.toml

&lt;span style=&#34;color:#75715e&#34;&gt;# (Optional -- Add some content)&lt;/span&gt;
hugo new posts/my-first-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Initialise our master branch within the public directory. All our generated files will live here, and can be pushed directly to our main branch on our Github Pages repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Setup the generated files git repo&lt;/span&gt;
git clone https://github.com/choonkiatlee/choonkiatlee.github.io.git public

&lt;span style=&#34;color:#75715e&#34;&gt;# Generate the site for the first time&lt;/span&gt;
hugo -D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Push all changes to the repository and watch the magic happen!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Commit the source files&lt;/span&gt;
git add .
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial commit of source files&amp;#34;&lt;/span&gt;
git push --set-upstream origin source

&lt;span style=&#34;color:#75715e&#34;&gt;# Commit the main site&lt;/span&gt;
cd public
git add .
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial commit of generated site&amp;#34;&lt;/span&gt;
git push 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This results in a local directory setup that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── archetypes (Source Files -- in the Source branch)
├── build.sh 
├── ...
└── public     (Generated Files -- in the Master branch)
    └── css
    └── tags
    └── ...
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Lastly, you can build and push your entire site to github with the following script. The commands can also be run as-is on windows using the command prompt if you have git configured on your path.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Build your site&lt;/span&gt;
hugo

&lt;span style=&#34;color:#75715e&#34;&gt;# Commit and push&lt;/span&gt;
cd  public 
git add .
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Update generated website&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Force push because we don&amp;#39;t care about the state of our master branch, we just want to push our currently generated files&lt;/span&gt;
git push -f
cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      </item>
    

  </channel>
</rss>
